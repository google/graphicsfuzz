/*
 * Copyright (C) 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY apic. DO NOT EDIT.
 */

#include <unordered_map>
#include <vector>
#include "vulkan/vulkan.h"
#include "core/vulkan/layer_helpers/vulkan_layer_helpers.h"
#include "core/vulkan/layer_helpers/threading.h"
namespace graphicsfuzz_shader_fuzzer {
    typedef const VkAllocationCallbacks* AllocationCallbacks;
    typedef size_t size_val;

    // Sets the key of the dispatch tables used in lower layers of the parent
    // dispatchable handle to the new child dispatchable handle. This is necessary
    // as lower layers may use that key to find the dispatch table, and a child
    // handle should share the same dispatch table key. E.g. VkCommandBuffer is a
    // child dispatchable handle of VkDevice, all the VkCommandBuffer dispatching
    // functions are actually device functions (resolved by VkGetDeviceProcAddress).
    // Ref:
    // https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers/blob/master/loader/LoaderAndLayerInterface.md#creating-new-dispatchable-objects,
    static inline void set_dispatch_from_parent(void *child, void *parent) {
        *((const void **)child) = *((const void **)parent);
    }

    struct InstanceFunctions {
        // Overriden Functions
        // Stored pointers to call
    };
    struct DeviceFunctions {
        // Overriden Functions
        PFN_vkCreateShaderModule vkCreateShaderModule;
        // Stored pointers to call
    };
    // All of the instance data that is needed for book-keeping in a layer.
    struct InstanceData {
        PFN_vkGetInstanceProcAddr get_instance_proc_addr;
        PFN_vkEnumeratePhysicalDevices enumerate_physical_devices;
        PFN_vkCreateDevice create_device;
        PFN_vkDestroyInstance destroy_instance;
        PFN_vkEnumerateDeviceExtensionProperties enumerate_device_extension_properties;
        InstanceFunctions* functions;
    };

    // All of the instance data that is needed for book-keeping in a layer.
    struct PhysicalDeviceData {
        VkInstance instance;
        PFN_vkCreateDevice create_device;
        InstanceFunctions* functions;
    };

    struct DeviceData {
        VkPhysicalDevice physical_device;
        VkInstance instance;
        PFN_vkGetDeviceProcAddr get_device_proc_addr;
        PFN_vkAllocateCommandBuffers allocate_command_buffers;
        PFN_vkGetDeviceQueue get_device_queue;
        PFN_vkDestroyDevice destroy_device;
        PFN_vkFreeCommandBuffers free_command_buffers;
        PFN_vkDestroyCommandPool destroy_command_pool;
        DeviceFunctions* functions;
    };

    struct QueueData {
        VkDevice device;
        DeviceFunctions* functions;
    };

    struct CommandBufferData {
        VkDevice device;
        VkCommandPool command_pool;
        DeviceFunctions* functions;
    };

    using Context = layer_helpers::Context<
    InstanceData,
    CommandBufferData,
    PhysicalDeviceData,
    QueueData,
    DeviceData>;
    Context &GetGlobalContext();
    VkResult vkCreateShaderModule(PFN_vkCreateShaderModule next, VkDevice device, VkShaderModuleCreateInfo const* pCreateInfo, AllocationCallbacks pAllocator, VkShaderModule* pShaderModule);
}