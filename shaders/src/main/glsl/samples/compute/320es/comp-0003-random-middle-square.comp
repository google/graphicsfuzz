#version 320 es

/*
 * Copyright 2019 The GraphicsFuzz Project Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// random-middle-square is a 1D compute shader to create random number using the
// middle square method: https://en.wikipedia.org/wiki/Middle-square_method

// NOTE: this is a toy compute shader

// NOTE: the data array size must be equal to the number of workgroups times the
// workgroup width.

layout(std430, binding = 0) buffer doesNotMatter {
  int global_seed;
  int data[];
};

layout(local_size_x=16, local_size_y=1) in;

int middle_square(int val) {
  int new = val * val;
  int mask_middle = 0x00FFFF00;
  new = new & mask_middle;
  new = new >> 8;
  return new;
}

void main() {
  int gid = int(gl_GlobalInvocationID.x);
  int lid = int(gl_LocalInvocationID.x);

  int local_seed = (gid * gid * global_seed) ^ ((~lid) << 8);

  int val = global_seed + local_seed;

  for (int i = 0; i < 3; i++) {
    if (lid > 0) {
      val += data[lid - 1];
    }
    if (lid < (int(gl_WorkGroupSize.x) - 1)) {
      val += data[lid + 1];
    }

    val = middle_square(val);

    groupMemoryBarrier();
    barrier();
    data[gid] = val;
    groupMemoryBarrier();
    barrier();
  }
}
