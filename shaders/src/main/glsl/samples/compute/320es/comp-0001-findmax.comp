#version 320 es

/*
 * Copyright 2019 The GraphicsFuzz Project Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// findmax is a 1D compute shader to find the maximum value in a int array.

// NOTE: this is a non-optimal way to find a maximum, it is used as a sample
// shader which contains loops and barriers.

// IMPORTANT: the data array size MUST be equal to the number of workgroups
// times the workgroup width.

layout(std430, binding = 0) buffer doesNotMatter {
  int result;
  int data[];
};

layout(local_size_x=16, local_size_y=1) in;

bool filter_thread_id(int thread_id, int mask) {
  return (thread_id % mask) == 0;
}

void main() {
  // thread id
  int tid = int(gl_GlobalInvocationID.x);
  // workgroup width (1D shader)
  int max_width = int(gl_WorkGroupSize.x);
  // max value seen by this thread so far
  int max_value = data[tid];

  // Illustration of the algorithm on an array of 8 ints:
  //
  // Iteration 1: compare_width = 2, only thread id's multiple of 2 will compare
  // data at their index with the one at index tid+1, save the max in inex tid
  //
  // Comparisons:
  // [ 1, 2, 3, 4, 5, 6, 7, 8 ]
  //   ^--^  ^--^  ^--^  ^--^
  //   t0    t2    t4    t6
  //
  // Resulting array:
  // [ 2, 2, 4, 4, 6, 6, 8, 8 ]
  //
  // Iteration 2: compare_width = 4, only thread id's multiple of 4 will compare
  // data at their index with the one at index tid+2, save the max in index tid
  //
  // Comparisons:
  // [ 2, 2, 4, 4, 6, 6, 8, 8 ]
  //   ^-----^     ^-----^
  //   t0          t4
  //
  // Resulting array:
  // [ 4, 2, 4, 4, 8, 6, 8, 8 ]
  //
  // Iteration 3: Idem with compare_width = 8
  // The end resulting array will have the max of the array in the left-most place
  //
  // Between each iteration we rely on the value written to the array to be
  // visible, so a memory barrier is needed.

  for (int compare_width = 2; compare_width <= max_width; compare_width *= 2) {
    if (filter_thread_id(tid, compare_width)) {
      int val = data[tid + compare_width / 2];
      if (max_value < val) {
        max_value = val;
      }
      data[tid] = max_value;
    }
    groupMemoryBarrier();
    barrier();
  }

  // Finally, one thread per workgroup place its max in the result.

  if (gl_LocalInvocationID.x == uint(0)) {
    atomicMax(result, data[tid]);
  }
}
