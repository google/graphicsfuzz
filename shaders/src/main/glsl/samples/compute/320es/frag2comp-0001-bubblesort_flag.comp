#version 320 es

/*
 * Copyright 2019 The GraphicsFuzz Project Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

precision highp float;

layout(std430, binding = 0) buffer doesNotMatter {
 vec4 _compute_data[];
};
layout(local_size_x = 1, local_size_y = 22, local_size_z = 2) in;
vec4 _GLF_color;

uniform vec2 injectionSwitch;

uniform vec2 resolution;

bool checkSwap(float a, float b)
{
 return vec4(float(gl_GlobalInvocationID.x), float(gl_GlobalInvocationID.y), float(gl_GlobalInvocationID.z), 0.0).y < resolution.y / 2.0 ? a > b : a < b;
}
void main()
{
 float data[10];
 for(
     int i = 0;
     i < 10;
     i ++
 )
  {
   data[i] = float(10 - i) * injectionSwitch.y;
  }
 for(
     int i = 0;
     i < 9;
     i ++
 )
  {
   for(
       int j = 0;
       j < 10;
       j ++
   )
    {
     if(j < i + 1)
      {
       continue;
      }
     bool doSwap = checkSwap(data[i], data[j]);
     if(doSwap)
      {
       float temp = data[i];
       data[i] = data[j];
       data[j] = temp;
      }
    }
  }
 if(vec4(float(gl_GlobalInvocationID.x), float(gl_GlobalInvocationID.y), float(gl_GlobalInvocationID.z), 0.0).x < resolution.x / 2.0)
  {
   _GLF_color = vec4(data[0] / 10.0, data[5] / 10.0, data[9] / 10.0, 1.0);
  }
 else
  {
   _GLF_color = vec4(data[5] / 10.0, data[9] / 10.0, data[0] / 10.0, 1.0);
  }
 {
  _compute_data[gl_GlobalInvocationID.z * gl_WorkGroupSize.y * gl_NumWorkGroups.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x + gl_GlobalInvocationID.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x + gl_GlobalInvocationID.x] = _GLF_color;
  return;
 }
}
