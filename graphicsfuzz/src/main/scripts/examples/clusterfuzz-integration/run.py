#!/usr/bin/env python

# Copyright 2019 The GraphicsFuzz Project Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Run the GraphicsFuzz crash fuzzer."""

import argparse
from collections import namedtuple
import fnmatch
import glob
import logging
import math
import os
import random
import shutil
import subprocess

# Path to the directory containing this source file.
SRC_DIR = os.path.dirname(os.path.realpath(__file__))
GRAPHICSFUZZ_BUILD_DIR = os.path.join(SRC_DIR, 'graphicsfuzz-build')
GRAPHICSFUZZ_DRIVERS_PATH = os.path.join(GRAPHICSFUZZ_BUILD_DIR, 'python',
                                         'drivers')
# TODO(metzman): Invoke GraphicsFuzz directly instead of invoking its helper
# script in another process.
GENERATION_SCRIPT_PATH = os.path.join(GRAPHICSFUZZ_DRIVERS_PATH,
                                      'glsl-generate.py')
# TODO(metzman): Use input_dir instead of getting shaders from GraphicsFuzz
# source tree. This will be used when get more shaders to use.
SHADERS_DIR = os.path.join(SRC_DIR, 'shaders-build')
DONORS_DIR = os.path.join(SHADERS_DIR, 'donors')
REFERENCES_BASE_DIR = os.path.join(SHADERS_DIR, 'references')
GRAPHICSFUZZ_DEPENDENCY_DIRS = [
    GRAPHICSFUZZ_BUILD_DIR, GENERATION_SCRIPT_PATH, SHADERS_DIR, DONORS_DIR,
    REFERENCES_BASE_DIR
]

PRECISION_HEADER = """#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
precision highp int;
#else
precision mediump float;
precision mediump int;
#endif
#endif"""

WebGLVersion = namedtuple('WebGL',
                          ['version', 'version_string', 'references_dir'])

WEBGL_V1 = WebGLVersion(1, '100', 'GLSL_100_es')
WEBGL_V2 = WebGLVersion(2, '300 es', 'GLSL_300_es')


class HTMLGenerator(object):
  """Class for generating HTML testcases that run the shaders generated by
  GraphicsFuzz."""

  HTML_TEMPLATE_PATH = os.path.join(SRC_DIR, 'resources',
                                    'graphicsfuzz_crash_fuzzer.html')

  def __init__(self, output_dir, webgl_version):
    self.output_dir = output_dir
    self.html_file_count = 0
    self.html_template = read_file(self.HTML_TEMPLATE_PATH)
    self.webgl_version = webgl_version

  def generate_html_from_shader(self, shader_path):
    """Generate an HTML testcase that will run the shader contained in
    |shader_path|."""
    fragment_shader = read_file(shader_path)
    # Extra data generated by GraphicsFuzz that is needed by the shader.
    uniforms_path = os.path.splitext(shader_path)[0] + '.json'
    uniforms = read_file(uniforms_path)
    self.write_html(uniforms, fragment_shader)

  def write_html(self, uniforms, fragment_shader, html_filename=None):
    """Write an file containing |uniforms| and |fragment_shader| to
    self.output_dir."""
    html = self.html_template.format(
        uniforms=uniforms,
        fragment_shader=fragment_shader,
        webgl_version=self.webgl_version.version)

    if html_filename is None:
      html_filename = 'fuzz-%d.html' % self.html_file_count
      self.html_file_count += 1

    html_file_path = os.path.join(self.output_dir, html_filename)
    write_file(html_file_path, html)

  def generate_html_files(self, shader_dir):
    """Read shaders from |shader_dir|, and then writes HTML files based on them
    to self.output_dir."""
    for root, _, filenames in os.walk(shader_dir):
      # Ignore the non-shader files generated by GraphicsFuzz. We can get the
      # files we need using the name of the fragment shader.
      for filename in fnmatch.filter(filenames, '*.frag'):
        self.generate_html_from_shader(os.path.join(root, filename))


def read_file(file_path):
  """Return contents from |file_path|."""
  with open(file_path) as file_handle:
    return file_handle.read()


def write_file(file_path, contents):
  """Write |contents| to |file_path|."""
  with open(file_path, 'w') as file_handle:
    return file_handle.write(contents)


def copy_resources(output_dir):
  """Copy resources needed by the HTML testcases to |output_dir|."""
  for resource_file in ['render.js', 'start_rendering.js']:
    dst = os.path.join(output_dir, resource_file)
    src = os.path.join(SRC_DIR, 'resources', resource_file)
    shutil.copy(src, dst)


def use_allow_long_loops_option():
  """Decide if we should invoke GraphicsFuzz with the --allow_long_loops
  option."""
  return random.random() <= 0.1


def use_small_option():
  """Decide if we should invoke GraphicsFuzz with the --small option."""
  return random.random() <= 0.1


def use_aggressively_complicate_control_flow():
  """Decide if we should invoke GraphicsFuzz with the
  --aggressively-compilicate-control-flow option."""
  # TODO(metzman): Reenable after this stops causing exceptions.
  return False


def generate_shaders(no_of_files, output_dir, webgl_version, verbose=False):
  """Generate |no_of_files| number of shaders using GraphicsFuzz and write them
  to |output_dir|."""
  for directory in GRAPHICSFUZZ_DEPENDENCY_DIRS:
    if not os.path.exists(directory):
      raise OSError('%s does not exist.' % directory)
  references_dir = os.path.join(REFERENCES_BASE_DIR,
                                webgl_version.references_dir)
  num_references = len(glob.glob(os.path.join(references_dir, '*.frag')))
  num_variants = str(int(math.ceil(no_of_files / float(num_references))))

  shader_prefix = 'a_shader_family'
  command = ['python', GENERATION_SCRIPT_PATH]
  if verbose:
    command.append('--verbose')

  arguments = [
      references_dir, DONORS_DIR, num_variants,
      shader_prefix, output_dir
  ]
  if use_allow_long_loops_option():
    logging.log(logging.INFO, "Using --allow-long-loops")
    command.append('--allow-long-loops')

  if use_small_option():
    logging.log(logging.INFO, "Using --small")
    command.append('--small')
  if use_aggressively_complicate_control_flow():
    logging.log(logging.INFO, "Using --aggressively-complicate-control-flow")
    command.append('--aggressively-complicate-control-flow')

  command.extend(arguments)
  if verbose:
    logging.log(logging.INFO, 'Generating shaders. Command: %s',
                ' '.join(command))

  try:
    subprocess.check_call(command)
  except subprocess.CalledProcessError as exception:
    logging.error('GraphicsFuzz failed: %s', str(exception))


def make_temp_directory(output_path):
  """Make a temp directory for GraphicsFuzz to write shaders to, so that the
  shaders don't need to be included in the output directory when the script
  terminates."""
  temp_path = os.path.join(output_path, 'temp')
  if os.path.exists(temp_path):
    shutil.rmtree(temp_path)
  os.makedirs(temp_path)
  return temp_path


def main():
  """Parse arguments and generate HTML files containing shaders generated by
  GraphicsFuzz."""
  parser = argparse.ArgumentParser()
  parser.add_argument(
      '--no_of_files',
      type=int,
      required=True,
      help='Number of testcases to generate.')
  parser.add_argument(
      '--input_dir',
      required=False,
      help='Ignored. Needed to support the ClusterFuzz fuzzer '
      'API.')
  parser.add_argument(
      '--output_dir',
      required=True,
      help='Directory to write HTML files containing shaders.')
  parser.add_argument(
      '--save_temp',
      action='store_true',
      default=False,
      help='Should the temp directory used by GraphicsFuzz to write shaders'
      'be saved after HTML generation? Useful for debugging.')
  parser.add_argument(
      '--verbose',
      action='store_true',
      default=False,
      help='Use INFO log-level and pass --verbose to GraphicsFuzz.')
  parser.add_argument(
      '--random_seed',
      type=int,
      default=0,
      help='Random seed used to determine which GraphicsFuzz knobs we tweak.')

  opts = parser.parse_args()
  if opts.random_seed:
    random.seed(opts.random_seed)

  if opts.verbose:
    logging.basicConfig(level=logging.INFO)

  # TODO(metzman): Only use WebGL2 for now. Allow WebGL1 when GraphicsFuzz can
  # handle it without excepting.
  webgl_version = WEBGL_V2

  temp_path = make_temp_directory(opts.output_dir)
  generate_shaders(opts.no_of_files, temp_path, webgl_version, opts.verbose)
  html_generator = HTMLGenerator(opts.output_dir, webgl_version)
  html_generator.generate_html_files(temp_path)
  copy_resources(opts.output_dir)
  if not opts.save_temp:
    shutil.rmtree(temp_path)


if __name__ == '__main__':
  main()
